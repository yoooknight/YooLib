// Code generated by goctl. DO NOT EDIT.
// Source: user.proto

package authrpc

import (
	"context"

	"app/auth/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CheckAuthReq          = pb.CheckAuthReq
	Empty                 = pb.Empty
	Resp                  = pb.Resp
	UpdateAuthByRoleIDReq = pb.UpdateAuthByRoleIDReq

	AuthRPC interface {
		UpdateAuthByRoleID(ctx context.Context, in *UpdateAuthByRoleIDReq, opts ...grpc.CallOption) (*Resp, error)
		UpdateAllAuth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Resp, error)
		CheckAuth(ctx context.Context, in *CheckAuthReq, opts ...grpc.CallOption) (*Resp, error)
	}

	defaultAuthRPC struct {
		cli zrpc.Client
	}
)

func NewAuthRPC(cli zrpc.Client) AuthRPC {
	return &defaultAuthRPC{
		cli: cli,
	}
}

func (m *defaultAuthRPC) UpdateAuthByRoleID(ctx context.Context, in *UpdateAuthByRoleIDReq, opts ...grpc.CallOption) (*Resp, error) {
	client := pb.NewAuthRPCClient(m.cli.Conn())
	return client.UpdateAuthByRoleID(ctx, in, opts...)
}

func (m *defaultAuthRPC) UpdateAllAuth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Resp, error) {
	client := pb.NewAuthRPCClient(m.cli.Conn())
	return client.UpdateAllAuth(ctx, in, opts...)
}

func (m *defaultAuthRPC) CheckAuth(ctx context.Context, in *CheckAuthReq, opts ...grpc.CallOption) (*Resp, error) {
	client := pb.NewAuthRPCClient(m.cli.Conn())
	return client.CheckAuth(ctx, in, opts...)
}
