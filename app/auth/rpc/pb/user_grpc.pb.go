// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthRPC_UpdateAuthByRoleID_FullMethodName = "/pb.AuthRPC/UpdateAuthByRoleID"
	AuthRPC_UpdateAllAuth_FullMethodName      = "/pb.AuthRPC/UpdateAllAuth"
	AuthRPC_CheckAuth_FullMethodName          = "/pb.AuthRPC/CheckAuth"
)

// AuthRPCClient is the client API for AuthRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthRPCClient interface {
	UpdateAuthByRoleID(ctx context.Context, in *UpdateAuthByRoleIDReq, opts ...grpc.CallOption) (*Resp, error)
	UpdateAllAuth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Resp, error)
	CheckAuth(ctx context.Context, in *CheckAuthReq, opts ...grpc.CallOption) (*Resp, error)
}

type authRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthRPCClient(cc grpc.ClientConnInterface) AuthRPCClient {
	return &authRPCClient{cc}
}

func (c *authRPCClient) UpdateAuthByRoleID(ctx context.Context, in *UpdateAuthByRoleIDReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, AuthRPC_UpdateAuthByRoleID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) UpdateAllAuth(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, AuthRPC_UpdateAllAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authRPCClient) CheckAuth(ctx context.Context, in *CheckAuthReq, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, AuthRPC_CheckAuth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthRPCServer is the server API for AuthRPC service.
// All implementations must embed UnimplementedAuthRPCServer
// for forward compatibility
type AuthRPCServer interface {
	UpdateAuthByRoleID(context.Context, *UpdateAuthByRoleIDReq) (*Resp, error)
	UpdateAllAuth(context.Context, *Empty) (*Resp, error)
	CheckAuth(context.Context, *CheckAuthReq) (*Resp, error)
	mustEmbedUnimplementedAuthRPCServer()
}

// UnimplementedAuthRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAuthRPCServer struct {
}

func (UnimplementedAuthRPCServer) UpdateAuthByRoleID(context.Context, *UpdateAuthByRoleIDReq) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthByRoleID not implemented")
}
func (UnimplementedAuthRPCServer) UpdateAllAuth(context.Context, *Empty) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllAuth not implemented")
}
func (UnimplementedAuthRPCServer) CheckAuth(context.Context, *CheckAuthReq) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedAuthRPCServer) mustEmbedUnimplementedAuthRPCServer() {}

// UnsafeAuthRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthRPCServer will
// result in compilation errors.
type UnsafeAuthRPCServer interface {
	mustEmbedUnimplementedAuthRPCServer()
}

func RegisterAuthRPCServer(s grpc.ServiceRegistrar, srv AuthRPCServer) {
	s.RegisterService(&AuthRPC_ServiceDesc, srv)
}

func _AuthRPC_UpdateAuthByRoleID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthByRoleIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).UpdateAuthByRoleID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRPC_UpdateAuthByRoleID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).UpdateAuthByRoleID(ctx, req.(*UpdateAuthByRoleIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_UpdateAllAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).UpdateAllAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRPC_UpdateAllAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).UpdateAllAuth(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthRPC_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthRPCServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthRPC_CheckAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthRPCServer).CheckAuth(ctx, req.(*CheckAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthRPC_ServiceDesc is the grpc.ServiceDesc for AuthRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthRPC",
	HandlerType: (*AuthRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAuthByRoleID",
			Handler:    _AuthRPC_UpdateAuthByRoleID_Handler,
		},
		{
			MethodName: "UpdateAllAuth",
			Handler:    _AuthRPC_UpdateAllAuth_Handler,
		},
		{
			MethodName: "CheckAuth",
			Handler:    _AuthRPC_CheckAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
